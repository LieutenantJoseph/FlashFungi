// Toast.js - Reusable Toast Notification Component
// Flash Fungi - Common Components

window.h = window.h || React.createElement; const h = window.h;

// Toast Hook for managing toast state
function useToast() {
    const [toasts, setToasts] = React.useState([]);
    
    const addToast = React.useCallback((message, type = 'info', duration = 4000) => {
        const id = Date.now() + Math.random();
        const toast = { id, message, type, duration };
        
        setToasts(prev => [...prev, toast]);
        
        // Auto-remove after duration
        if (duration > 0) {
            setTimeout(() => {
                removeToast(id);
            }, duration);
        }
        
        return id;
    }, []);
    
    const removeToast = React.useCallback((id) => {
        setToasts(prev => prev.filter(toast => toast.id !== id));
    }, []);
    
    const success = React.useCallback((message, duration) => 
        addToast(message, 'success', duration), [addToast]);
    
    const error = React.useCallback((message, duration) => 
        addToast(message, 'error', duration), [addToast]);
    
    const warning = React.useCallback((message, duration) => 
        addToast(message, 'warning', duration), [addToast]);
    
    const info = React.useCallback((message, duration) => 
        addToast(message, 'info', duration), [addToast]);
    
    return {
        toasts,
        addToast,
        removeToast,
        success,
        error,
        warning,
        info
    };
}

// Individual Toast Component
function Toast({ toast, onRemove }) {
    const getToastStyles = (type) => {
        const baseStyles = {
            padding: '0.75rem 1rem',
            borderRadius: '0.5rem',
            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            gap: '0.5rem',
            minWidth: '300px',
            maxWidth: '500px',
            animation: 'slideIn 0.3s ease-out',
            marginBottom: '0.5rem'
        };
        
        const typeStyles = {
            success: {
                backgroundColor: '#dcfce7',
                borderLeft: '4px solid #10b981',
                color: '#065f46'
            },
            error: {
                backgroundColor: '#fef2f2',
                borderLeft: '4px solid #ef4444',
                color: '#991b1b'
            },
            warning: {
                backgroundColor: '#fef3c7',
                borderLeft: '4px solid #f59e0b',
                color: '#92400e'
            },
            info: {
                backgroundColor: '#eff6ff',
                borderLeft: '4px solid #3b82f6',
                color: '#1e40af'
            }
        };
        
        return { ...baseStyles, ...typeStyles[type] };
    };
    
    const getIcon = (type) => {
        const icons = {
            success: '✅',
            error: '❌',
            warning: '⚠️',
            info: 'ℹ️'
        };
        return icons[type] || icons.info;
    };
    
    return h('div', {
        style: getToastStyles(toast.type)
    },
        h('div', { style: { display: 'flex', alignItems: 'center', gap: '0.5rem' } },
            h('span', { style: { fontSize: '1rem' } }, getIcon(toast.type)),
            h('span', { style: { fontSize: '0.875rem', fontWeight: '500' } }, toast.message)
        ),
        h('button', {
            onClick: () => onRemove(toast.id),
            style: {
                background: 'none',
                border: 'none',
                cursor: 'pointer',
                fontSize: '1.125rem',
                fontWeight: 'bold',
                color: 'inherit',
                opacity: 0.7,
                padding: '0.25rem'
            },
            onMouseEnter: (e) => e.target.style.opacity = '1',
            onMouseLeave: (e) => e.target.style.opacity = '0.7'
        }, '×')
    );
}

// Toast Container Component
function ToastContainer({ toasts, onRemoveToast }) {
    if (toasts.length === 0) return null;
    
    return h('div', {
        style: {
            position: 'fixed',
            top: '1rem',
            right: '1rem',
            zIndex: 9999,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'flex-end'
        }
    },
        // Add CSS animation styles
        h('style', null, `
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `),
        toasts.map(toast =>
            h(Toast, {
                key: toast.id,
                toast,
                onRemove: onRemoveToast
            })
        )
    );
}

// Toast Provider Component for Context
function ToastProvider({ children }) {
    const toastMethods = useToast();
    
    // Expose toast methods globally for easy access
    React.useEffect(() => {
        window.toast = {
            success: toastMethods.success,
            error: toastMethods.error,
            warning: toastMethods.warning,
            info: toastMethods.info
        };
        
        return () => {
            delete window.toast;
        };
    }, [toastMethods]);
    
    return h(React.Fragment, null,
        children,
        h(ToastContainer, {
            toasts: toastMethods.toasts,
            onRemoveToast: toastMethods.removeToast
        })
    );
}

// Export components and hook
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { Toast, ToastContainer, ToastProvider, useToast };
} else {
    // Browser global assignment
    window.Toast = Toast;
    window.ToastContainer = ToastContainer;
    window.ToastProvider = ToastProvider;
    window.useToast = useToast;
}